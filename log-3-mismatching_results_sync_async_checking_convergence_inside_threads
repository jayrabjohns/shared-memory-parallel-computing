[H[2J[3Jthread: 0; start_row: 1; end_row: 3
thread: 1; start_row: 3; end_row: 5
thread: 2; start_row: 5; end_row: 9
[ASYNC] solved in 23 iterations
[SYNC] solved in 27 iterations
FAIL solution doesn't match synchronous implementation

sync impl result
1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 
1.000000 0.953414 0.909445 0.869637 0.833224 0.796197 0.748335 0.665423 0.482658 0.000000 
1.000000 0.909445 0.824526 0.748498 0.681020 0.616507 0.542981 0.438778 0.269402 0.000000 
1.000000 0.869637 0.748498 0.642309 0.551285 0.470350 0.388935 0.292090 0.163889 0.000000 
1.000000 0.833224 0.681020 0.551285 0.444816 0.356434 0.277098 0.195986 0.104004 0.000000 
1.000000 0.796197 0.616507 0.470350 0.356434 0.268052 0.196162 0.131473 0.066977 0.000000 
1.000000 0.748335 0.542981 0.388935 0.277098 0.196162 0.135560 0.086573 0.042587 0.000000 
1.000000 0.665423 0.438778 0.292090 0.195986 0.131473 0.086573 0.053029 0.025380 0.000000 
1.000000 0.482658 0.269402 0.163889 0.104004 0.066977 0.042587 0.025380 0.011902 0.000000 
1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 
async impl result:
1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 
1.000000 0.946841 0.897378 0.854027 0.816295 0.780147 0.734910 0.655862 0.477711 0.000000 
1.000000 0.897378 0.802463 0.719899 0.650116 0.587214 0.518526 0.421394 0.260405 0.000000 
1.000000 0.854027 0.719899 0.605394 0.511405 0.432682 0.357562 0.269822 0.152398 0.000000 
1.000000 0.816295 0.650116 0.511405 0.401912 0.316019 0.243542 0.172263 0.091767 0.000000 
1.000000 0.780147 0.587214 0.432682 0.316019 0.230125 0.164818 0.109361 0.055619 0.000000 
1.000000 0.734910 0.518526 0.357562 0.243542 0.164818 0.109729 0.068448 0.033281 0.000000 
1.000000 0.655862 0.421394 0.269822 0.172263 0.109361 0.068448 0.040325 0.018889 0.000000 
1.000000 0.477711 0.260405 0.152398 0.091767 0.055619 0.033281 0.018889 0.008581 0.000000 
1.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 






// Checking outside the thread
// converged = true;
// for (size_t row = 0; row < size && converged; row++)
// {
//     for (size_t col = 0; col < size && converged; col++)
//     {
//         const double diff = fabs((*values)[row][col] - (*prev_values)[row][col]);
//         if (diff > precision)
//             converged = false;
//     }
// }

// Checking inside the thread
converged = true;
for (size_t i = 0; i < thread_count; i++)
{
    if (!args->converged)
    {
        converged = false;
        break;
    }
}